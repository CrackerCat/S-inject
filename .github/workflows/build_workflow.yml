name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: v${{ github.sha }}  # 使用 Git SHA 值作为标签名，确保唯一性
        release_name: Release v${{ github.sha }}
        body: "Release of binaries built on GitHub Actions"
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true  

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        # 动态生成输出目录和二进制文件名
        OUTPUT_DIR="${{ github.workspace }}/build-${{ matrix.os }}-${{ matrix.c_compiler }}"
        BINARY_NAME="myapp-${{ matrix.os }}-${{ matrix.c_compiler }}"
        echo "output-dir=$OUTPUT_DIR" >> "$GITHUB_OUTPUT"
        echo "binary-name=$BINARY_NAME" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ steps.strings.outputs.output-dir }}
        -DCMAKE_EXECUTABLE_OUTPUT_NAME=${{ steps.strings.outputs.binary-name }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Package binaries (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        $outputDir = "${{ steps.strings.outputs.output-dir }}\${{matrix.build_type}}"
        $binaryFile = "S-Inject.exe"
        $archiveName = "${{matrix.os}}_${{matrix.c_compiler}}_S-Inject.tar.gz"

        if (Test-Path -Path "$outputDir\$binaryFile") {
          Compress-Archive -Path "$outputDir\$binaryFile" -DestinationPath "$outputDir\..\$archiveName"
          Copy-Item -Path "$outputDir\$binaryFile" -Destination "$outputDir\..\${{matrix.os}}_${{matrix.c_compiler}}_$binaryFile"
        } else {
          Write-Error "Error: Binary file '$binaryFile' not found!"
          exit 1
        }

    - name: Upload compress as release assets
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ steps.strings.outputs.output-dir }}/${{matrix.os}}_${{matrix.c_compiler}}_S-Inject.tar.gz
        asset_name: ${{matrix.os}}_${{matrix.c_compiler}}_S-Inject.tar.gz
        asset_content_type: application/gzip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload windows binaries as release assets
      uses: actions/upload-release-asset@v1
      if: matrix.os == 'windows-latest'
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ steps.strings.outputs.output-dir }}/${{matrix.os}}_${{matrix.c_compiler}}_S-Inject.exe
        asset_name: ${{matrix.os}}_${{matrix.c_compiler}}_S-Inject.exe
        asset_content_type: application/gzip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        