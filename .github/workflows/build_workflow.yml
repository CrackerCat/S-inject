name: Build and Release Windows CMake Project

on:
  push:
    tags:
      - 'v*'        # 以v开头的tag触发
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    strategy:
      matrix:
        arch: [x86, x64]

    env:
      BUILD_TYPE: Release
      TARGET_NAME: S-inject.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup CMake
      uses: lukka/get-cmake@v3

    - name: Setup MSVC environment
      shell: powershell
      id: vssetup
      run: |
        $vsPath = &"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
        if (-not $vsPath) { throw "Visual Studio not found" }
        $vcvarsall = Join-Path $vsPath 'VC\Auxiliary\Build\vcvarsall.bat'
        Write-Host "::set-output name=vcvarsall::$vcvarsall"

    - name: Configure and Build ${{ matrix.arch }}
      shell: cmd
      run: |
        call "%VCVARSALL%" ${{ matrix.arch }}
        if exist build rd /s /q build
        mkdir build
        cd build
        cmake -G "Ninja" -A ${{ matrix.arch }} -DCMAKE_BUILD_TYPE=%BUILD_TYPE% -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=%CD% -DTARGET_NAME=${{ env.TARGET_NAME }} ..
        cmake --build . --config %BUILD_TYPE%
      env:
        VCVARSALL: ${{ steps.vssetup.outputs.vcvarsall }}

    - name: Rename executable to S-inject.exe (if needed)
      shell: cmd
      run: |
        cd build\%BUILD_TYPE%
        if not exist "%TARGET_NAME%" (
          rem 找到exe文件并重命名
          for %%f in (*.exe) do (
            ren "%%f" "%TARGET_NAME%"
          )
        )
      env:
        TARGET_NAME: ${{ env.TARGET_NAME }}
        BUILD_TYPE: ${{ env.BUILD_TYPE }}

    - name: Zip ${{ matrix.arch }} Release
      shell: powershell
      run: |
        cd build\%BUILD_TYPE%
        Compress-Archive -Path * -DestinationPath ../../${{ matrix.arch }}-release.zip

    - name: Upload artifact ${{ matrix.arch }} Release
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.arch }}-release
        path: ${{ matrix.arch }}-release.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v2.3') || startsWith(github.ref, 'refs/tags/v2.') || startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Download x86 artifact
      uses: actions/download-artifact@v3
      with:
        name: x86-release
        path: ./x86-release

    - name: Download x64 artifact
      uses: actions/download-artifact@v3
      with:
        name: x64-release
        path: ./x64-release

    - name: Rename artifacts with version in filename
      run: |
        mv x86-release/x86-release.zip x86-release/S-inject-x86-${{ github.ref_name }}.zip
        mv x64-release/x64-release.zip x64-release/S-inject-x64-${{ github.ref_name }}.zip

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

    - name: Upload x86 artifact to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./x86-release/S-inject-x86-${{ github.ref_name }}.zip
        asset_name: S-inject-x86-${{ github.ref_name }}.zip
        asset_content_type: application/zip

    - name: Upload x64 artifact to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./x64-release/S-inject-x64-${{ github.ref_name }}.zip
        asset_name: S-inject-x64-${{ github.ref_name }}.zip
        asset_content_type: application/zip
